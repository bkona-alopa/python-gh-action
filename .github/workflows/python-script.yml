on:
  pull_request:
    branches:
      - main
      - master
      - release*
      - develop

jobs:
  image-scan:
    name: image-scan-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: python setup
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: installing jira
        run: |
          pip install jira

      - name: running script for geeting tickets
        uses: jannekem/run-python-script-action@v1
        with:
          script: |
            import re
            regex = r"([A-Za-z]{2,6}-[0-9]{1,6})"
            listOfTicketsFromBranchName = re.findall(regex, "${{ github.head_ref }}")
            listOfTicketsFromPRTitle = re.findall(regex, "${{ github.event.pull_request.title }}")
            LIST_OF_TICKETS = listOfTicketsFromBranchName + listOfTicketsFromPRTitle
            set_env("LIST_OF_TICKETS", LIST_OF_TICKETS)

      - name: running script for jira connection
        uses: jannekem/run-python-script-action@v1
        with:
          script: |
            from jira import JIRA
            import re 
            #######################################################################################################
            # ADD THE REQUIRED LIST OF ALLOWED ADVISORIES INTHE BELOW LIST
            ALLOWED_STATUS_LIST = ["In Progress", "Needs Review", "Selected For Development", "Reopened", "Assign"]
            #######################################################################################################
            jiraOptions = {'server': "https://amalgamrx.atlassian.net"}
            jira = JIRA(options=jiraOptions, basic_auth=("${{ secrets.JIRA_USER_NAME }}", "${{ secrets.JIRA_TOKEN }}"))

            for ticket in ${{ env.LIST_OF_TICKETS }}:
                try:    
                    singleIssue = jira.issue(ticket)
                except:
                    print(ticket + " ticket is not valid")
                    print("Jira Connection Failed...")
                    exit(1)
                
                ticketStatus = singleIssue.fields.status.name    
                if ticketStatus in ALLOWED_STATUS_LIST:
                    pass
                else:
                    print(ticket + " status in not allowed")
                    print("Jira Connection Failed...")
                    exit(1)
                    
                try:    
                    parentCheck = singleIssue.fields.parent
                    parentTicket = singleIssue.fields.parent.key
                    parentTicketData = jira.issue(parentTicket)
                    epicCheck = parentTicketData.fields.issuetype.name
                    parentTicketStatus = parentTicketData.fields.status.name
                    if epicCheck != "Epic":
                        if parentTicketStatus in ALLOWED_STATUS_LIST and parentTicket in LIST_OF_TICKETS:
                            pass
                        else:
                            print(parentTicket + " is a parent ticket, either it is not mentioned (or) status is not allowed")
                            print("Jira Connection Failed...")
                            exit(1)
                    else:
                        pass
                except AttributeError:
                    pass
                
            print("Jira connection passed")